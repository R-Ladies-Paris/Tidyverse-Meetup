[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Keeping it Tidy",
    "section": "",
    "text": "Register now Workshop slides Code file"
  },
  {
    "objectID": "index.html#about-the-workshop",
    "href": "index.html#about-the-workshop",
    "title": "Keeping it Tidy",
    "section": "About the Workshop",
    "text": "About the Workshop\nThis 90-minute workshop is targeted toward beginners/advanced beginners and will serve as an introduction to the tidyverse, a collection of packages designed to aid in the cleaning and wrangling of data. In order to give you the tools to embark upon your own analysis on your own data, we will work through a sample data set and discuss methods for modifying, aggregating, reshaping, and visualizing data.\nThe event is free and will be held virtually over Zoom, though registration is required!\n\n\nTechnical Details\nYou are free to ‚Äúcode along‚Äù throughout the workshop, using the details in the slides and on this page, but you do not have to! All the materials are publicly available, so feel free to just watch and go through the code at your own pace at a later date. Unfortunately, due to time and other logistical constraints of this workshop, there won‚Äôt be time for individual troubleshooting.\nIf you would like to be prepared to code along, please have R and RStudio installed on your computer and make sure that the tidyverse is installed with install.packages(\"tidyverse\").\n\n\nWebsite materials\nThe materials on this website are designed as a companion for the live workshop, not as a comprehensive guide to the entire tidyverse. All the code is here, along with some background on the concepts discussed, but the details are more fleshed out in the workshop itself. The workshop slides are linked above.\nThe code is interspersed throughout, but the full code.R file is available at the link above."
  },
  {
    "objectID": "index.html#workshop-data",
    "href": "index.html#workshop-data",
    "title": "Keeping it Tidy",
    "section": "Workshop data",
    "text": "Workshop data\nThe data we‚Äôre using for today‚Äôs workshop comes from #TidyTuesday, a weekly social data data project based on the tidyverse ecosystem. The GitHub repo hosts many interesting data sets to practice with, and this particular data set comes from the American Kennel Club.\nread_csv() from the readr package (loaded as part of the tidyverse!) imports data of multiple file formats, and the two data sets for this workshop can be read in directly from this website‚Äôs GitHub repo.\n\nlibrary(tidyverse)\nbreed_rank <- read_csv(\"https://raw.githubusercontent.com/meghall06/rladiesparis/master/breed_rank.csv\")\nbreed_traits <- read_csv(\"https://raw.githubusercontent.com/meghall06/rladiesparis/master/breed_traits.csv\")\n\nThe first data set, breed_rank, lists the popularity rankings over time for 195 different dog breeds (many of the snippets shown throughout are truncated for the purposes of display).\n\nbreed_rank\n\n\n\n\n\n\n \n  \n    Breed \n    2013 Rank \n    2014 Rank \n    2015 Rank \n    2016 Rank \n    2017 Rank \n    2018 Rank \n    2019 Rank \n    2020 Rank \n  \n \n\n  \n    Retrievers (Labrador) \n    1 \n    1 \n    1 \n    1 \n    1 \n    1 \n    1 \n    1 \n  \n  \n    French Bulldogs \n    11 \n    9 \n    6 \n    6 \n    4 \n    4 \n    4 \n    2 \n  \n  \n    German Shepherd Dogs \n    2 \n    2 \n    2 \n    2 \n    2 \n    2 \n    2 \n    3 \n  \n  \n    Retrievers (Golden) \n    3 \n    3 \n    3 \n    3 \n    3 \n    3 \n    3 \n    4 \n  \n\n\n\n\n\n\nThe second data set, breed_traits, has information on 16 different traits, classified from 1 to 5, for those 195 dog breeds.\n\nbreed_traits\n\n\n\n\n\n\n \n  \n    Breed \n    Affectionate With Family \n    Good With Young Children \n    Good With Other Dogs \n    Shedding Level \n  \n \n\n  \n    Retrievers (Labrador) \n    5 \n    5 \n    5 \n    4 \n  \n  \n    French Bulldogs \n    5 \n    5 \n    4 \n    3 \n  \n  \n    German Shepherd Dogs \n    5 \n    5 \n    3 \n    4 \n  \n  \n    Retrievers (Golden) \n    5 \n    5 \n    5 \n    4 \n  \n\n\n\n\n\n\nFor today‚Äôs workshop, since we‚Äôll be learning about tidy data, we‚Äôll investigate some very untidy dogs. To do so, we‚Äôll be specifically focusing on three of these trait variables: shedding level, coat grooming frequency, and drooling level."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#bar-chart",
    "href": "index.html#bar-chart",
    "title": "Keeping it Tidy",
    "section": "Bar chart",
    "text": "Bar chart\n\n\n\n\n\n\nNote! üö®\n\n\n\nFor all of the plots in this workshop, I have included code for the most basic, out-of-the-box version as well as code to make a more custom plot (toggle to the custom tab to see it). The former can be useful whenever you‚Äôre a) learning and/or b) visualizing data for personal data exploration purposes, but if you‚Äôre looking to present your plots in any way, you‚Äôll likely want to make some customizations. Thankfully, ggplot makes that possible! I use a special theme for the custom plots, the code for which is available below.\n\n\n\n\nbonus: custom ggplot theme\nlibrary(showtext) # helps with custom fonts\nfont_add_google(\"Prompt\", \"prompt\") # load preferred Google fonts\nshowtext_auto()\n\ntheme_tidy_dog <- function () { \n  theme_linedraw(base_size=13, base_family=\"prompt\") %+replace% \n    theme(\n      # justify axis titles\n      axis.title = element_text(hjust = 0),\n      # backgrounds to match website\n      panel.background = element_rect(fill='#F9E0D9', color = NA),\n      plot.background = element_rect(fill='#F9E0D9', color=NA),\n      legend.background = element_rect(fill=\"transparent\", color=NA),\n      legend.key = element_rect(fill=\"transparent\", color=NA),\n      # I hate axis ticks and lines :shrug:\n      axis.ticks = element_blank(),\n      panel.grid.major = element_line(color = \"grey90\", size = 0.3), \n      panel.grid.minor = element_blank(),\n      # make tweaks to the title and subtitle\n      plot.title = element_text(size = 15, hjust = 0, vjust = 0.5, face = \"bold\", \n                                margin = margin(b = 0.2, unit = \"cm\")),\n      plot.subtitle = element_text(size = 10, hjust = 0, vjust = 0.5, \n                                   margin = margin(b = 0.2, unit = \"cm\")),\n    )\n}\n\n\nOur previous output showed the six untidiest dogs, along with their untidy score. Let‚Äôs make a simple bar chart to visualize that data. Our untidy_scores data set we created previously has all 194 breeds, but for this purpose we want to create a new data set, untidy_dogs, with only the six highest scores.\nThe slice_max function is quite handy for filtering and keeping only the highest values of a certain variable. This function has multiple arguments: the first specifies the variable to filter on (untidy_score), the second specifies the number of observations we want to keep, and the third clarifies our stance on ties (here we‚Äôll just ignore them).\n\nuntidy_dogs <- untidy_scores |> \n  slice_max(untidy_score, n = 6, with_ties = FALSE)\n\nWe are left with only six observations in this data set, which we can use to make our bar chart.\n\n\n\n\n\n \n  \n    breed \n    untidy_score \n  \n \n\n  \n    Bernese Mountain Dogs \n    11 \n  \n  \n    Leonbergers \n    11 \n  \n  \n    Newfoundlands \n    10 \n  \n  \n    Bloodhounds \n    10 \n  \n  \n    St. Bernards \n    10 \n  \n  \n    Old English Sheepdogs \n    10 \n  \n\n\n\n\n\n\nggplot2 is the tidyverse package used for making plots‚Äîgg stands for the grammar of graphics. The base function is ggplot(), and there are many (many, many) associated functions to help construct and customize your plots.\n\n\n\n\n\n\nNote! üö®\n\n\n\nWhen you‚Äôre working with ggplot and its related functions, you need to pipe lines together with + instead of |>. Sometimes you will forget (I still do, and I‚Äôve been using ggplot for years ü§∑), but the error message you get is helpful.\n\n\nThe code for the bar chart below starts with the name of our data frame: untidy_dogs. The ggplot function starts things off by mapping elements to our aesthetic attributes. Here we just have x and y, but you‚Äôll see more later. We only have two variables in this data set, so untidy_score will go on the x-axis and breed will go on the y.\nWe specify the geometric points with the following line: geom_bar() signifies a bar chart. The stat = \"identity\" argument is necessary here to communicate that we want the bar lengths to be determined by the variable that we specified. (The standard bar chart just takes a raw count of your data.)\n\nBasicCustom\n\n\n\nuntidy_dogs |> \n  ggplot(aes(x = untidy_score, y = breed)) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n\n\n\n\nexpand for full code\nuntidy_dogs |> \n  # can reorder the breeds based on the untidy score\n  ggplot(aes(x = untidy_score, y = reorder(breed, untidy_score), \n             label = untidy_score)) +\n  # fill colors the bars\n  geom_bar(stat = \"identity\", fill = \"#6A395B\") +\n  # add the data labels\n  geom_label(family = \"prompt\") +\n  # ensure the bars go all the way to the axis line\n  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(title = \"The untidiest dogs\",\n       subtitle = \"Based on drooling, shedding, and grooming frequency\",\n       x = \"Untidiness score\", y = NULL) +\n  theme_tidy_dog()"
  },
  {
    "objectID": "index.html#why-r",
    "href": "index.html#why-r",
    "title": "Keeping it Tidy",
    "section": "Why R?",
    "text": "Why R?\nR is an open-source (free!) scripting language for working with data\nWonderfully efficient and ‚ú® rproducible ‚ú®\n\nGetting started\n\n\nWhy the tidyverse?\n\nCommon dplyr verbs\n\n\nCommon operators"
  },
  {
    "objectID": "index.html#basic-data-cleaning",
    "href": "index.html#basic-data-cleaning",
    "title": "Keeping it Tidy",
    "section": "Basic data cleaning",
    "text": "Basic data cleaning\nPer the tidyverse style guide, variable names should use snake case‚Äîlower case with underscores between words. This helps with consistency and readability, but it‚Äôs also technically easier, as any variable names that start with numbers and/or have spaces need to be referred to within `back ticks`. It‚Äôs easier to refer to a variable with shedding_level instead of `Shedding Level`, and thankfully we have a function to easily rename all of those variables instead of doing it by hand.\nUnfortunately‚Ä¶that function does not live within the tidyverse! It‚Äôs the only such function we‚Äôll be highlighting during this workshop, but it is so helpful that it has to be included.\nIn the code below, after we‚Äôve loaded the janitor package, the first line uses the assignment operator <- to ‚Äúsave as‚Äù our breed_traits data set. We could give it another name and save it as something else, but for this purpose we‚Äôre going to overwrite it. The second line applies the clean_names() function.\n\n\n\n\n\n\nNote! üö®\n\n\n\nA helpful tip on notation: once a package has been loaded with library, you can use the function by itself, like you see here with clean_names() and above with read_csv(). If you don‚Äôt want to load the package, you can eliminate that line and instead refer to the function along with its package name, such as janitor::clean_names(). (The package still has to be installed, however.)\n\n\n\nlibrary(janitor)\n\nbreed_traits <- breed_traits |> \n  clean_names()\n\nThe clean_names() function neatly converts all variable names to snake case, as shown below.\n\n\n\n\n\n \n  \n    breed \n    affectionate_with_family \n    good_with_young_children \n  \n \n\n  \n    Retrievers (Labrador) \n    5 \n    5 \n  \n  \n    French Bulldogs \n    5 \n    5 \n  \n\n\n\n\n\n\n\ncount()\nIf you want to look at your data, use View(breed_traits) and it will pop up in RStudio in a spreadsheet-like format. But there are ways to programatically look at your data, as well, and one of the most useful functions for doing so is count(). It allows you to count the unique values of a variable (or multiple).\nNote that this piece of code does not have an assignment operator! We are applying the count() function to the breed_traits data set, but the results would appear in your console and would not be saved anywhere. This is useful whenever you don‚Äôt need to save the output.\n\nbreed_traits |> \n  count(shedding_level)\n\nThis output tallies up our data by the shedding_level variable. 109 breeds have a value of 3, 41 breeds have a value of 2, etc. Unfortunately, we have a value of zero, and we know that these variables should have a value of 1, 2, 3, 4, or 5. This is likely an error in the data that should be removed.\n\n\n\n\n\n \n  \n    shedding_level \n    n \n  \n \n\n  \n    0 \n    1 \n  \n  \n    1 \n    27 \n  \n  \n    2 \n    41 \n  \n  \n    3 \n    109 \n  \n  \n    4 \n    16 \n  \n  \n    5 \n    1 \n  \n\n\n\n\n\n\n\n\nfilter()\nTo investigate this further, we can use the filter() function, which keeps or discards observations (rows). Here, the function argument says that we want to keep all records with a shedding_level value of zero (and we know from our count() output above that there should be only one such observation). I‚Äôm also adding the select() function (which keeps or discards columns) to keep only our columns of interest.\nYou can see how, thanks to the pipe |>, we start with our breed_traits data set, apply the filter() function with that input, apply the select() function to the given output, and then the results would be shown in the console.\n\nbreed_traits |> \n  filter(shedding_level == 0) |> \n  select(breed, shedding_level, coat_grooming_frequency, \n         drooling_level)\n\nThere is in fact only one observation matching this criteria‚Äîit looks like something is wrong with the record on Plott Hounds, so we should remove them from our data set (even though they‚Äôre quite cute).\n\n\n\n\n\n \n  \n    breed \n    shedding_level \n    coat_grooming_frequency \n    drooling_level \n  \n \n\n  \n    Plott Hounds \n    0 \n    0 \n    0 \n  \n\n\n\n\n\n\nWe can use the filter() function once again to make this change. You‚Äôll notice in the code below that the assignment operator is back, which means we‚Äôre making changes to our data set. We‚Äôll overwrite the breed_traits data frame once again and apply a filter() function to keep only the records in which shedding_level does not equal zero (i.e., all but the Plott Hounds observation). The != operator means not equal to.\n\nbreed_traits <- breed_traits |> \n  filter(shedding_level != 0)\n\nIf you were to once again run breed_traits |> count(shedding_level), you‚Äôd see that zero is no longer a value of that variable.\n\n\nmutate()\nI mentioned earlier that the focus of our analysis will be untidy dogs and that we‚Äôll be focusing on three of the traits. Since those traits are classified from 1 to 5 for each breed, with a higher score denoting a higher level of untidiness, we can add up the scores for all three traits to create a new variable.\nThe code below uses the assignment operator <- again, but this time we‚Äôre starting with the breed_traits data frame and creating a new data frame called untidy_scores. The mutate() function creates this new variable, untidy_score, that adds up our three traits of interest, and the select() function keeps only two columns from our original data set.\n\nuntidy_scores <- breed_traits |> \n  mutate(untidy_score = shedding_level + \n           coat_grooming_frequency + drooling_level) |> \n  select(breed, untidy_score)\n\nOur entire data set now consists of the untidy_score for 194 breeds (we had 195 until we dropped the Plott Hounds).\n\n\n\n\n\n \n  \n    breed \n    untidy_score \n  \n \n\n  \n    Retrievers (Labrador) \n    8 \n  \n  \n    French Bulldogs \n    7 \n  \n  \n    German Shepherd Dogs \n    8 \n  \n  \n    Retrievers (Golden) \n    8 \n  \n  \n    Bulldogs \n    9 \n  \n\n\n\n\n\n\n\n\narrange()\nThe arrange() function can be useful to quickly sort your data set based on the value of any selected variable(s). arrange() defaults to ascending order, as you can see in the code and output on the left, but you can specify descending order by wrapping the variable name within desc(), as seen in the code on the right.\n\n\n\nuntidy_scores |> \n  arrange(untidy_score)\n\n\n\n\n\n\n\n \n  \n    breed \n    untidy_score \n  \n \n\n  \n    American Hairless Terriers \n    3 \n  \n  \n    Xoloitzcuintli \n    3 \n  \n  \n    Cirnechi dell Etna \n    3 \n  \n  \n    Chihuahuas \n    4 \n  \n  \n    Whippets \n    4 \n  \n  \n    Chinese Crested \n    4 \n  \n\n\n\n\n\n\n\n\n\nuntidy_scores |> \n  arrange(desc(untidy_score))\n\n\n\n\n\n\n \n  \n    breed \n    untidy_score \n  \n \n\n  \n    Bernese Mountain Dogs \n    11 \n  \n  \n    Leonbergers \n    11 \n  \n  \n    Newfoundlands \n    10 \n  \n  \n    Bloodhounds \n    10 \n  \n  \n    St. Bernards \n    10 \n  \n  \n    Old English Sheepdogs \n    10"
  },
  {
    "objectID": "index.html#tidy-data",
    "href": "index.html#tidy-data",
    "title": "Keeping it Tidy",
    "section": "Tidy data",
    "text": "Tidy data\nFrom the work we‚Äôve done so far, we know that Bernese Mountain Dogs are among the untidiest of all: they have the highest score of 11. So far we‚Äôve mostly been working with the breed_traits data, but we have a whole other data set, breed_ranks. Can we look at how the popularity ranking of Bernese Mountain Dogs has shifted over time?\n\n\n\n\n\n \n  \n    Breed \n    2013 Rank \n    2014 Rank \n    2015 Rank \n    2016 Rank \n    2017 Rank \n    2018 Rank \n    2019 Rank \n    2020 Rank \n  \n \n\n  \n    Bernese Mountain Dogs \n    32 \n    32 \n    29 \n    27 \n    25 \n    22 \n    23 \n    22 \n  \n\n\n\n\n\n\nI am imagining some kind of dot plot, with the year on the x-axis and the ranking on the y-axis. That seems easy enough based on the data that we have above, but if you were to start constructing that plot, you‚Äôd pretty quickly run into a road block. What would your first function look like? ggplot(aes(x = ??, y = ??))\nWe discussed earlier that the tidyverse is opinionated on the topic of tidy data, and this particular question is tricky because this data set does not meet the criteria for tidy data:\n\nThere are three interrelated rules which make a dataset tidy: 1. Each variable must have its own column. 2. Each observation must have its own row. 3. Each value must have its own cell. - R for Data Science\n\n\npivot_longer()\nThankfully, the tidyverse gives us a handy solution from the tidyr package.\n\nranks_pivoted <- breed_rank |> \n  pivot_longer(`2013 Rank`:`2020 Rank`,\n               names_to = \"year\",\n               values_to = \"rank\")\n\n\n\n\n\n\n \n  \n    Breed \n    year \n    rank \n  \n \n\n  \n    Bernese Mountain Dogs \n    2013 Rank \n    32 \n  \n  \n    Bernese Mountain Dogs \n    2014 Rank \n    32 \n  \n  \n    Bernese Mountain Dogs \n    2015 Rank \n    29 \n  \n  \n    Bernese Mountain Dogs \n    2016 Rank \n    27 \n  \n  \n    Bernese Mountain Dogs \n    2017 Rank \n    25 \n  \n  \n    Bernese Mountain Dogs \n    2018 Rank \n    22 \n  \n  \n    Bernese Mountain Dogs \n    2019 Rank \n    23 \n  \n  \n    Bernese Mountain Dogs \n    2020 Rank \n    22 \n  \n\n\n\n\n\n\n\nranks_pivoted <- ranks_pivoted |> \n  rename(breed = Breed) |> \n  mutate(year = parse_number(year))\n\n\n\n\n\n\n \n  \n    breed \n    year \n    rank \n  \n \n\n  \n    Bernese Mountain Dogs \n    2013 \n    32 \n  \n  \n    Bernese Mountain Dogs \n    2014 \n    32 \n  \n  \n    Bernese Mountain Dogs \n    2015 \n    29 \n  \n  \n    Bernese Mountain Dogs \n    2016 \n    27 \n  \n  \n    Bernese Mountain Dogs \n    2017 \n    25 \n  \n  \n    Bernese Mountain Dogs \n    2018 \n    22 \n  \n  \n    Bernese Mountain Dogs \n    2019 \n    23 \n  \n  \n    Bernese Mountain Dogs \n    2020 \n    22"
  },
  {
    "objectID": "index.html#dot-plot",
    "href": "index.html#dot-plot",
    "title": "Keeping it Tidy",
    "section": "Dot plot",
    "text": "Dot plot\n\nBasicCustom\n\n\n\nranks_pivoted |> \n  filter(str_detect(breed, \"Bernese\")) |> \n  ggplot(aes(x = year, y = rank, label = rank)) +\n  geom_point(size = 3) +\n  geom_text(vjust = 2)\n\n\n\n\n\n\n\n\n\n\n\n\nexpand for full code\nranks_pivoted |> \n  filter(str_detect(breed, \"Bernese\")) |> \n  ggplot(aes(x = year, y = rank, label = rank)) +\n  geom_point(size = 3) +\n  geom_text(vjust = 2) +\n  scale_y_reverse(limits = c(50, 1)) +\n  scale_x_continuous(breaks = seq(2013, 2020, 1)) +\n  labs(x = NULL, y = \"Popularity Rank\",\n       title = \"Popularity of Bernese Mountain Dogs\") +\n  theme_tidy_dog()"
  },
  {
    "objectID": "index.html#line-graph",
    "href": "index.html#line-graph",
    "title": "Keeping it Tidy",
    "section": "Line graph",
    "text": "Line graph\ncan we plot the popularity ranking of the untidiest dogs?\n\n\n\nuntidy_dogs\n\n\n\n\n\n\n \n  \n    breed \n    untidy_score \n  \n \n\n  \n    Bernese Mountain Dogs \n    11 \n  \n  \n    Leonbergers \n    11 \n  \n  \n    Newfoundlands \n    10 \n  \n  \n    Bloodhounds \n    10 \n  \n  \n    St. Bernards \n    10 \n  \n  \n    Old English Sheepdogs \n    10 \n  \n\n\n\n\n\n\n\n\nranks_pivoted\n\n\n\n\n\n\n \n  \n    breed \n    year \n    rank \n  \n \n\n  \n    Retrievers (Labrador) \n    2013 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2014 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2015 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2016 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2017 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2018 \n    1 \n  \n\n\n\n\n\n\n\n\n\nuntidy_popularity <- ranks_pivoted |> \n  filter(breed %in% untidy_dogs$breed)\n\ncheck that this filtered the way we wanted it to!\n\nuntidy_popularity |> \n  count(breed)\n\n\n\n\n\n\n \n  \n    breed \n    n \n  \n \n\n  \n    Bernese Mountain Dogs \n    8 \n  \n  \n    Bloodhounds \n    8 \n  \n  \n    Leonbergers \n    8 \n  \n  \n    Newfoundlands \n    8 \n  \n  \n    Old English Sheepdogs \n    8 \n  \n  \n    St. Bernards \n    8 \n  \n\n\n\n\n\n\n\nBasicCustom\n\n\n\nuntidy_popularity |> \n  ggplot(aes(x = year, y = rank, group = breed, color = breed)) +\n  geom_line() +\n  geom_point(size = 3)\n\n\n\n\n\n\n\n\n\n\n\n\nexpand for full code\nuntidy_popularity |> \n  mutate(label = ifelse(year == 2020, breed, NA)) |> \n  ggplot(aes(x = year, y = rank, group = breed, color = breed,\n             label = label)) +\n  geom_line() +\n  geom_point(size = 3) +\n  geom_text(hjust = -0.1, family = \"prompt\") +\n  scale_color_viridis_d(option = \"A\") +\n  scale_x_continuous(expand = expansion(mult = c(0.025, 0.5)),\n                     breaks = seq(2013, 2020, 1)) +\n  scale_y_reverse() +\n  labs(title = \"Popularity over time of the untidiest dogs\",\n       subtitle = \"Based on drooling, shedding, and grooming frequency\",\n       x = NULL,\n       y = \"Popularity Rank\") +\n  theme_tidy_dog() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "index.html#relational-data-left_join",
    "href": "index.html#relational-data-left_join",
    "title": "Keeping it Tidy",
    "section": "Relational data: left_join()",
    "text": "Relational data: left_join()\ncan we plot the average popularity ranking against the tidy_scores for all dogs?\n\navg_ranks <- ranks_pivoted |> \n  group_by(breed) |> \n  summarize(avg_rank = mean(rank))\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n  \n \n\n  \n    Affenpinschers \n    147.750 \n  \n  \n    Afghan Hounds \n    105.875 \n  \n  \n    Airedale Terriers \n    57.375 \n  \n  \n    Akitas \n    46.500 \n  \n  \n    Alaskan Malamutes \n    58.875 \n  \n  \n    American English Coonhounds \n    169.125 \n  \n  \n    American Eskimo Dogs \n    118.875 \n  \n  \n    American Foxhounds \n    185.250 \n  \n  \n    American Hairless Terriers \n    NA \n  \n\n\n\n\n\n\n\navg_ranks <- ranks_pivoted |> \n  group_by(breed) |> \n  summarize(avg_rank = mean(rank, na.rm = TRUE))\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n  \n \n\n  \n    Affenpinschers \n    147.750 \n  \n  \n    Afghan Hounds \n    105.875 \n  \n  \n    Airedale Terriers \n    57.375 \n  \n  \n    Akitas \n    46.500 \n  \n  \n    Alaskan Malamutes \n    58.875 \n  \n  \n    American English Coonhounds \n    169.125 \n  \n  \n    American Eskimo Dogs \n    118.875 \n  \n  \n    American Foxhounds \n    185.250 \n  \n  \n    American Hairless Terriers \n    129.000 \n  \n\n\n\n\n\n\ncan we plot the average popularity ranking against the tidy_scores for all dogs?\n\n\n\navg_ranks\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n  \n \n\n  \n    Affenpinschers \n    147.750 \n  \n  \n    Afghan Hounds \n    105.875 \n  \n  \n    Airedale Terriers \n    57.375 \n  \n  \n    Akitas \n    46.500 \n  \n  \n    Alaskan Malamutes \n    58.875 \n  \n\n\n\n\n\n\n\n\nuntidy_scores\n\n\n\n\n\n\n \n  \n    breed \n    untidy_score \n  \n \n\n  \n    Retrievers (Labrador) \n    8 \n  \n  \n    French Bulldogs \n    7 \n  \n  \n    German Shepherd Dogs \n    8 \n  \n  \n    Retrievers (Golden) \n    8 \n  \n  \n    Bulldogs \n    9 \n  \n\n\n\n\n\n\n\n\nother join types are available, but left_join() is the most common (more info in R4DS)\n\ntidy_and_rank <- avg_ranks |> \n  left_join(untidy_scores, by = \"breed\")\n\ncan specify keys with by = \"var\"\n\nmultiple: by = c(\"var1\",\"var2\")\ndifferent names: by = c(\"var_left\" = \"var_right\")\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n    untidy_score \n  \n \n\n  \n    Affenpinschers \n    147.750 \n    7 \n  \n  \n    Afghan Hounds \n    105.875 \n    6 \n  \n\n\n\n\n\n\ncheck that this worked the way we wanted it to!\n\ntidy_and_rank |> \n  count(untidy_score)\n\n\n\n\n\n\n \n  \n    untidy_score \n    n \n  \n \n\n  \n    3 \n    3 \n  \n  \n    4 \n    13 \n  \n  \n    5 \n    25 \n  \n  \n    6 \n    43 \n  \n  \n    7 \n    59 \n  \n  \n    8 \n    30 \n  \n  \n    9 \n    11 \n  \n  \n    10 \n    8 \n  \n  \n    11 \n    2 \n  \n  \n    NA \n    1 \n  \n\n\n\n\n\n\n\ntidy_and_rank |> \n  filter(is.na(untidy_score))\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n    untidy_score \n  \n \n\n  \n    Plott Hounds \n    167 \n    NA \n  \n\n\n\n\n\n\n\ntidy_and_rank <- tidy_and_rank |> \n  filter(!is.na(untidy_score))\n\n\n\n\n\n\n \n  \n    untidy_score \n    n \n  \n \n\n  \n    3 \n    3 \n  \n  \n    4 \n    13 \n  \n  \n    5 \n    25 \n  \n  \n    6 \n    43 \n  \n  \n    7 \n    59 \n  \n  \n    8 \n    30 \n  \n  \n    9 \n    11 \n  \n  \n    10 \n    8 \n  \n  \n    11 \n    2"
  },
  {
    "objectID": "index.html#jitter-plot",
    "href": "index.html#jitter-plot",
    "title": "Keeping it Tidy",
    "section": "Jitter plot",
    "text": "Jitter plot\n\nBasicCustom\n\n\n\ntidy_and_rank |> \n  ggplot(aes(x = untidy_score, y = avg_rank)) +\n  geom_jitter(width = 0.1)\n\n\n\n\n\n\n\n\n\n\n\n\nexpand for full code\ntidy_and_rank |>  \n  ggplot(aes(x = untidy_score, y = avg_rank)) +\n  scale_x_continuous(breaks = seq(3, 11, 1)) +\n  geom_jitter(size = 3, width = 0.1, alpha = 0.7, color = \"#6A395B\") +\n  scale_y_reverse(breaks = c(200, 150, 100, 50, 1)) +\n  labs(title = \"Dog breed popularity compared to their untidiness score\",\n       subtitle = \"Ranking based on 2013-2020 data; tidy score based on drooling, shedding, grooming frequency\",\n       x = \"Untidiness Score\",\n       y = \"Average Popularity Rank\") +\n  theme_tidy_dog()"
  },
  {
    "objectID": "index.html#pivot_wider",
    "href": "index.html#pivot_wider",
    "title": "Keeping it Tidy",
    "section": "pivot_wider()",
    "text": "pivot_wider()\nwhich breeds have had the biggest jump in popularity?\n\nranks_pivoted\n\n\n\n\n\n\n \n  \n    breed \n    year \n    rank \n  \n \n\n  \n    Retrievers (Labrador) \n    2013 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2014 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2015 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2016 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2017 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2018 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2019 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2020 \n    1 \n  \n  \n    French Bulldogs \n    2013 \n    11 \n  \n\n\n\n\n\n\nwhich breeds have had the biggest jump in popularity?\n\nranks_pivoted\n\n\n\n\n\n\n \n  \n    breed \n    year \n    rank \n  \n \n\n  \n    Retrievers (Labrador) \n    2013 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2014 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2015 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2016 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2017 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2018 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2019 \n    1 \n  \n  \n    Retrievers (Labrador) \n    2020 \n    1 \n  \n  \n    French Bulldogs \n    2013 \n    11 \n  \n\n\n\n\n\n\nwill all deliver the same results:\n\nfilter(year %in% c(2013, 2020))\nfilter(year == 2013 | year == 2020)\nfilter(year == min(year) | year == max(year)) üëà most robust option\n\n\nrank_change <- ranks_pivoted |>  \n  filter(year == min(year) | year == max(year)) |> \n  pivot_wider(names_from = \"year\",\n              values_from = \"rank\") |>  \n  mutate(change = `2013` - `2020`) |> \n  filter(`2020` <= 50) |>  \n  slice_max(change, n = 6)\n\n\n\n\n\n\n \n  \n    breed \n    2013 \n    2020 \n    change \n  \n \n\n  \n    Cane Corso \n    50 \n    25 \n    25 \n  \n  \n    Belgian Malinois \n    60 \n    37 \n    23 \n  \n  \n    Spaniels (English Cocker) \n    62 \n    47 \n    15 \n  \n  \n    Pembroke Welsh Corgis \n    24 \n    11 \n    13 \n  \n  \n    Border Collies \n    44 \n    32 \n    12 \n  \n  \n    Bernese Mountain Dogs \n    32 \n    22 \n    10"
  },
  {
    "objectID": "index.html#dumbbell-plot",
    "href": "index.html#dumbbell-plot",
    "title": "Keeping it Tidy",
    "section": "Dumbbell plot",
    "text": "Dumbbell plot\nuseful plot type for showing change between two points\nto be honest: it‚Äôs easier to make these with ggalt::geom_dumbbell()\nbut we can use ggplot2 to learn a) how to combine multiple geoms and b) how inherited aes works\n\nBasicCustom\n\n\n\nrank_change |>  \n  ggplot(aes(y = breed)) +\n  geom_segment(aes(yend = breed, x = `2013`, xend = `2020`)) +\n  geom_point(aes(x = `2013`), color = \"#c991b8\", size = 3) +\n  geom_point(aes(x = `2020`), color = \"#6A395B\", size = 3) +\n  geom_label(aes(x = `2020`, label = `2020`), vjust = -0.5) +\n  geom_label(aes(x = `2013`, label = `2013`), vjust = -0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nexpand for full code\nrank_change |>  \n  mutate(middle = `2020` + (change / 2)) |>  \n  ggplot(aes(y = reorder(breed, -`2020`))) +\n  geom_segment(aes(yend = reorder(breed, -`2020`), x = `2013`, xend = `2020`), \n               color = \"grey20\") +\n  geom_point(aes(x = `2013`), color = \"#c991b8\", size = 3) +\n  geom_point(aes(x = `2020`), color = \"#6A395B\", size = 3) +\n  geom_label(aes(x = `2020`, label = `2020`), family = \"prompt\", vjust = -0.5) +\n  geom_label(aes(x = `2013`, label = `2013`), family = \"prompt\", vjust = -0.5) +\n  geom_text(aes(x = middle, label = str_c(\"+\", change)), family = \"prompt\", \n            vjust = -0.75, size = 3.5) +\n  scale_x_reverse() +\n  labs(x = \"Popularity Ranking\",\n       y = NULL,\n       title = \"Dog breeds with the biggest jump in popularity from 2013\",\n       subtitle = \"Among the top 50 in 2020\") +\n  theme_tidy_dog() +\n  theme(panel.grid.major.y = element_blank(),\n        plot.title.position = \"plot\")"
  },
  {
    "objectID": "index.html#relational-data",
    "href": "index.html#relational-data",
    "title": "Keeping it Tidy",
    "section": "Relational data",
    "text": "Relational data\ncan we plot the average popularity ranking against the tidy_scores for all dogs?\n\navg_ranks <- ranks_pivoted |> \n  group_by(breed) |> \n  summarize(avg_rank = mean(rank))\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n  \n \n\n  \n    Affenpinschers \n    147.750 \n  \n  \n    Afghan Hounds \n    105.875 \n  \n  \n    Airedale Terriers \n    57.375 \n  \n  \n    Akitas \n    46.500 \n  \n  \n    Alaskan Malamutes \n    58.875 \n  \n  \n    American English Coonhounds \n    169.125 \n  \n  \n    American Eskimo Dogs \n    118.875 \n  \n  \n    American Foxhounds \n    185.250 \n  \n  \n    American Hairless Terriers \n    NA \n  \n\n\n\n\n\n\n\navg_ranks <- ranks_pivoted |> \n  group_by(breed) |> \n  summarize(avg_rank = mean(rank, na.rm = TRUE))\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n  \n \n\n  \n    Affenpinschers \n    147.750 \n  \n  \n    Afghan Hounds \n    105.875 \n  \n  \n    Airedale Terriers \n    57.375 \n  \n  \n    Akitas \n    46.500 \n  \n  \n    Alaskan Malamutes \n    58.875 \n  \n  \n    American English Coonhounds \n    169.125 \n  \n  \n    American Eskimo Dogs \n    118.875 \n  \n  \n    American Foxhounds \n    185.250 \n  \n  \n    American Hairless Terriers \n    129.000 \n  \n\n\n\n\n\n\ncan we plot the average popularity ranking against the tidy_scores for all dogs?\n\n\n\navg_ranks\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n  \n \n\n  \n    Affenpinschers \n    147.750 \n  \n  \n    Afghan Hounds \n    105.875 \n  \n  \n    Airedale Terriers \n    57.375 \n  \n  \n    Akitas \n    46.500 \n  \n  \n    Alaskan Malamutes \n    58.875 \n  \n\n\n\n\n\n\n\n\nuntidy_scores\n\n\n\n\n\n\n \n  \n    breed \n    untidy_score \n  \n \n\n  \n    Retrievers (Labrador) \n    8 \n  \n  \n    French Bulldogs \n    7 \n  \n  \n    German Shepherd Dogs \n    8 \n  \n  \n    Retrievers (Golden) \n    8 \n  \n  \n    Bulldogs \n    9 \n  \n\n\n\n\n\n\n\n\nother join types are available, but left_join() is the most common (more info in R4DS)\n\ntidy_and_rank <- avg_ranks |> \n  left_join(untidy_scores, by = \"breed\")\n\ncan specify keys with by = \"var\"\n\nmultiple: by = c(\"var1\",\"var2\")\ndifferent names: by = c(\"var_left\" = \"var_right\")\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n    untidy_score \n  \n \n\n  \n    Affenpinschers \n    147.750 \n    7 \n  \n  \n    Afghan Hounds \n    105.875 \n    6 \n  \n\n\n\n\n\n\ncheck that this worked the way we wanted it to!\n\ntidy_and_rank |> \n  count(untidy_score)\n\n\n\n\n\n\n \n  \n    untidy_score \n    n \n  \n \n\n  \n    3 \n    3 \n  \n  \n    4 \n    13 \n  \n  \n    5 \n    25 \n  \n  \n    6 \n    43 \n  \n  \n    7 \n    59 \n  \n  \n    8 \n    30 \n  \n  \n    9 \n    11 \n  \n  \n    10 \n    8 \n  \n  \n    11 \n    2 \n  \n  \n    NA \n    1 \n  \n\n\n\n\n\n\n\ntidy_and_rank |> \n  filter(is.na(untidy_score))\n\n\n\n\n\n\n \n  \n    breed \n    avg_rank \n    untidy_score \n  \n \n\n  \n    Plott Hounds \n    167 \n    NA \n  \n\n\n\n\n\n\n\ntidy_and_rank <- tidy_and_rank |> \n  filter(!is.na(untidy_score))\n\n\n\n\n\n\n \n  \n    untidy_score \n    n \n  \n \n\n  \n    3 \n    3 \n  \n  \n    4 \n    13 \n  \n  \n    5 \n    25 \n  \n  \n    6 \n    43 \n  \n  \n    7 \n    59 \n  \n  \n    8 \n    30 \n  \n  \n    9 \n    11 \n  \n  \n    10 \n    8 \n  \n  \n    11 \n    2"
  },
  {
    "objectID": "index.html#r-and-the-tidyverse",
    "href": "index.html#r-and-the-tidyverse",
    "title": "Keeping it Tidy",
    "section": "R and the tidyverse",
    "text": "R and the tidyverse\nR is an open-source (that means free!) scripting language for working with data. It helps make your analysis wonderfully efficient and ‚ú® reproducible ‚ú®, and I would highly recommend it over something like Excel for anything beyond data analysis, especially if you expect to repeat that analysis ever again (which you probably will).\nHaving a) your data separate from your analysis and b) that analysis codified in a script will help tremendously with reproducibility efforts. That makes it easier for anyone else (including yourself in three months once you have forgotten all the details you swore you‚Äôd remember) to rerun your code and make edits, deal with updated data, etc.\n\nGetting started\nYou need the R language, as well as a place to actually run that R code. I highly recommend RStudio. Both are free to download. There are some basic installation instructions here.\nYou use R via packages, which hold functions, which are just verbs. filter is an example of a function. The functions we‚Äôll see today take the syntax function(argument). Many functions can take multiple arguments, which are separated by a comma.\n(You can also write your own functions, but that is beyond the scope of this workshop. See more here.)\n\n\nWhy the tidyverse?\nThe tidyverse is an opinionated set of packages that work together and are designed for common data science tasks. (By opinionated, I mean that the packages have some thoughts on how your data should be structured. We‚Äôll discuss the concept of tidy data later on in this workshop.) The packages are well-maintained and beginner-friendly, plus they cover almost all of what any beginner and/or intermediate user needs in order to get started doing some data analysis.\nYou install packages with the command install.packages(\"tidyverse\") (need to do once per R installation on your computer) and then load them with the command library(tidyverse) (need to do every session; it is convention to put all of the necessary packages at the top of your coding script).\nSince the tidyverse is actually a set of packages, the library(tidyverse) command loads nine of them‚Äîthe eight listed below, in addition to lubridate, which is useful for working with dates (I clearly need to update my packages before I take screenshots!).\n\nWe‚Äôll be focusing on the three packages highlighted above, though there are several more packages within the tidyverse family (shown below). You would need to install and load any of those separately.\n\n\nCommon dplyr verbs\ndplyr is perhaps the most useful tidyverse package, just due to how often you‚Äôll use its common functions for data manipulation.\n\nfilter() keeps or discards rows (aka observations)\nselect() keeps or discards columns (aka variables)\narrange() sorts data set by certain variable(s)\ncount() tallies data set by certain variable(s)\nmutate() creates new variables\nsummarize() aggregates data\n\nBoth mutate() and summarize() can be further modified by the addition of the group_by() function to specify grouping variables. We‚Äôll see examples of all of these during this workshop.\n\n\nCommon operators\n<- is the assignment operator, used for assigning objects like data frames (how data sets are commonly stored in R). I like to think of <-, which can be added with the shortcut option - in RStudio, as ‚Äúsave as.‚Äù\n|> is the pipe, used to chain together multiple lines of code. It automatically sends the output of one line into the input of the next line and makes it much easier to read and write code. The keyboard shortcut is cmd shift m.\nYou might also be familiar with %>%, which is the original pipe that was native to the tidyverse. The new pipe |> works in base R and is therefore a bit more versatile, but for the purposes of this workshop feel free to use either! I am trying to get familiar with using |> instead of %>%, so that‚Äôs what you‚Äôll see here."
  }
]